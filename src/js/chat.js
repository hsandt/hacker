// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Chat = (function() {
    Chat.incomingMessageSequence = ["Hi!", "How are you?", "Is everything alright?"];

    Chat.prototype.nextIncomingMessageIdx = 0;

    Chat.prototype.choices = [];

    function Chat(chatScreen) {
      this.showMessageInputChoiceList = bind(this.showMessageInputChoiceList, this);
      this.sendMessage = bind(this.sendMessage, this);
      this.receiveAllMessages = bind(this.receiveAllMessages, this);
      this.receiveNextMessage = bind(this.receiveNextMessage, this);
      this.scrollToBottom = bind(this.scrollToBottom, this);
      this.startDialogue = bind(this.startDialogue, this);
      this.chatHistory = chatScreen.find(".chat-history");
      this.chatHistoryList = this.chatHistory.find("ul");
      this.chatInput = chatScreen.find(".chat-input");
      this.chatInputList = this.chatInput.find("ul");
    }

    Chat.prototype.startDialogue = function(dialogueGraph) {};

    Chat.prototype.scrollToBottom = function() {
      return this.chatHistory.animate({
        scrollTop: this.chatHistory[0].scrollHeight
      }, 200, "swing");
    };

    Chat.prototype.receiveNextMessage = function() {
      var context, template;
      template = Handlebars.compile($("#message-received-template").html());
      context = {
        message: Chat.incomingMessageSequence[this.nextIncomingMessageIdx],
        time: "12:00"
      };
      this.chatHistoryList.append(template(context));
      this.scrollToBottom();
      return ++this.nextIncomingMessageIdx;
    };

    Chat.prototype.receiveAllMessages = function(nbMessages, timeInterval) {
      if (nbMessages === 0) {
        return;
      }
      this.receiveNextMessage();
      return setTimeout(((function(_this) {
        return function() {
          return _this.receiveAllMessages(nbMessages - 1, timeInterval);
        };
      })(this)), timeInterval);
    };

    Chat.prototype.sendMessage = function(messageIdx) {
      var template;
      template = Handlebars.compile($("#message-sent-template").html());
      this.chatHistoryList.append(template({
        message: this.choices[messageIdx].message
      }));
      return this.scrollToBottom();
    };

    Chat.prototype.showMessageInputChoiceList = function() {
      var choice, choiceLi, choiceMessages, fn, i, j, results, template;
      this.choices.length = 0;
      template = Handlebars.compile($("#message-input-choice-template").html());
      choiceMessages = ["Okay", "Get lost!"];
      fn = (function(_this) {
        return function(i) {
          return choiceLi.click(function() {
            return _this.sendMessage(i);
          });
        };
      })(this);
      results = [];
      for (i = j = 0; j < 2; i = ++j) {
        console.log(i);
        choice = new DialogueChoice(i, choiceMessages[i]);
        this.choices.push(choice);
        choiceLi = $(template({
          choiceMessage: choice.message
        }));
        fn(i);
        results.push(this.chatInputList.append(choiceLi));
      }
      return results;
    };

    return Chat;

  })();

  this.DialogueGraph = (function() {
    function DialogueGraph() {}

    return DialogueGraph;

  })();

  this.DialogueNode = (function() {
    function DialogueNode(id, messages, choices) {
      this.id = id;
      this.messages = messages;
      this.choices = choices;
    }

    return DialogueNode;

  })();

  this.DialogueChoice = (function() {
    function DialogueChoice(idx, message, nextNodeId) {
      this.idx = idx;
      this.message = message;
      this.nextNodeId = nextNodeId;
    }

    return DialogueChoice;

  })();

}).call(this);

//# sourceMappingURL=chat.js.map
