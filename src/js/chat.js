// Generated by CoffeeScript 1.10.0
(function() {
  var Choice,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Chat = (function() {
    Chat.incomingMessageSequence = ["Hi!", "How are you?", "Is everything alright?"];

    Chat.prototype.nextIncomingMessageIdx = 0;

    Chat.prototype.choices = [];

    function Chat(chatScreen) {
      this.showMessageInputChoiceList = bind(this.showMessageInputChoiceList, this);
      this.scrollToBottom = bind(this.scrollToBottom, this);
      this.displayMessageSequence = bind(this.displayMessageSequence, this);
      this.displayNextMessage = bind(this.displayNextMessage, this);
      this.chatHistory = chatScreen.find(".chat-history");
      this.chatHistoryList = this.chatHistory.find("ul");
      this.chatInput = chatScreen.find(".chat-input");
      this.chatInputList = this.chatInput.find("ul");
    }

    Chat.prototype.displayNextMessage = function() {
      var context, template;
      template = Handlebars.compile($("#message-template").html());
      context = {
        messageOutput: Chat.incomingMessageSequence[this.nextIncomingMessageIdx],
        time: "12:00"
      };
      this.chatHistoryList.append(template(context));
      ++this.nextIncomingMessageIdx;
      return this.scrollToBottom();
    };

    Chat.prototype.displayMessageSequence = function(nbMessages, timeInterval) {
      if (nbMessages === 0) {
        return;
      }
      this.displayNextMessage();
      return setTimeout(((function(_this) {
        return function() {
          return _this.displayMessageSequence(nbMessages - 1, timeInterval);
        };
      })(this)), timeInterval);
    };

    Chat.prototype.scrollToBottom = function() {
      return this.chatHistory.animate({
        scrollTop: this.chatHistory[0].scrollHeight
      }, 200, "swing");
    };

    Chat.prototype.showMessageInputChoiceList = function() {
      var choice, choiceLi, choiceMessages, fn, i, j, results, template;
      this.choices.length = 0;
      template = Handlebars.compile($("#message-input-choice-template").html());
      choiceMessages = ["Okay", "Get lost!"];
      fn = function(i) {
        return choiceLi.click(function() {
          return console.log(i);
        });
      };
      results = [];
      for (i = j = 0; j < 2; i = ++j) {
        console.log(i);
        choice = new Choice(i, choiceMessages[i]);
        this.choices.push(choice);
        choiceLi = $(template({
          choiceMessage: choice.message
        }));
        fn(i);
        results.push(this.chatInputList.append(choiceLi));
      }
      return results;
    };

    return Chat;

  })();

  Choice = (function() {
    function Choice(id, message) {
      this.id = id;
      this.message = message;
    }

    return Choice;

  })();

}).call(this);

//# sourceMappingURL=chat.js.map
