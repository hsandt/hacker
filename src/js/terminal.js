// Generated by CoffeeScript 1.10.0
(function() {
  var CommandStrings, Commands,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  this.Terminal = (function() {
    function Terminal(terminalScreen) {
      this.print = bind(this.print, this);
      this.enterCommand = bind(this.enterCommand, this);
      this.interpreter = new CommandInterpreter;
      this.output = [];
      this.outputDiv = terminalScreen.find(".output");
      this.history = [];
      this.promptInput = terminalScreen.find(".prompt-input");
      this.promptInput.focus();
      this.promptInput.blur((function(_this) {
        return function() {
          return _this.promptInput.focus();
        };
      })(this));
      terminalScreen.find(".prompt-submit").click((function(_this) {
        return function() {
          return _this.enterCommand(_this.promptInput.val());
        };
      })(this));
    }

    Terminal.prototype.enterCommand = function(command) {
      var error, error1, syntaxTree;
      this.promptInput.val("");
      this.print('> ' + command);
      try {
        syntaxTree = this.interpreter.parse(command);
      } catch (error1) {
        error = error1;
        this.print(error.message);
        return;
      }
      return this.interpreter.execute(syntaxTree, this);
    };

    Terminal.prototype.print = function() {
      var i, len, line, lines, results;
      lines = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      results = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        results.push(this.outputDiv.append(document.createTextNode(line)).append('<br>'));
      }
      return results;
    };

    return Terminal;

  })();

  this.CommandInterpreter = (function() {
    function CommandInterpreter() {
      this.execute = bind(this.execute, this);
      this.parse = bind(this.parse, this);
    }

    CommandInterpreter.prototype.parse = function(command) {
      var word;
      console.log("[TERMINAL] Parse '" + command + "'");
      word = command;
      if (!(word in CommandStrings)) {
        throw SyntaxError(word + " is not a known command.");
      }
      return CommandStrings[word];
    };

    CommandInterpreter.prototype.execute = function(syntaxTree, terminal) {
      console.log("[TERMINAL] Execute " + syntaxTree);
      return syntaxTree.execute(terminal);
    };

    return CommandInterpreter;

  })();

  this.Command = (function() {
    function Command() {
      this.execute = bind(this.execute, this);
    }

    Command.prototype.execute = function(terminal) {
      throw this + " has not implemented the 'execute' method.";
    };

    return Command;

  })();

  this.HelpCommand = (function(superClass) {
    extend(HelpCommand, superClass);

    function HelpCommand() {
      this.execute = bind(this.execute, this);
      return HelpCommand.__super__.constructor.apply(this, arguments);
    }

    HelpCommand.prototype.execute = function(terminal) {
      return terminal.print("List of available commands:", "help -- show this help menu", "ls -- show files and subdirectories in current directory");
    };

    HelpCommand.prototype.toString = function() {
      return "HELP command";
    };

    return HelpCommand;

  })(Command);

  this.LsCommand = (function(superClass) {
    extend(LsCommand, superClass);

    function LsCommand() {
      this.execute = bind(this.execute, this);
      return LsCommand.__super__.constructor.apply(this, arguments);
    }

    LsCommand.prototype.execute = function(terminal) {
      return terminal.print("bin", "etc", "home", "usr");
    };

    LsCommand.prototype.toString = function() {
      return "LS command";
    };

    return LsCommand;

  })(Command);

  Commands = {
    HELP: new HelpCommand(),
    LS: new LsCommand()
  };

  CommandStrings = {
    "help": Commands.HELP,
    "ls": Commands.LS,
    "dir": Commands.LS
  };

}).call(this);

//# sourceMappingURL=terminal.js.map
