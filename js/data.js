// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.GameData = (function() {
    GameData.prototype.missions = {
      "mission01": new Mission("mission01", (function() {}), (function() {}))
    };

    GameData.prototype.eventFunctions = {
      "mission-test.start": function() {
        return game.servers["moogle"].getRoot().getDir('home/john').addFile(new TextFile("mail", ["mt1_t1_01", "mt1_t1_02"].map(game.locale.getLine).join('\n'), "mission-test.conclusion"));
      },
      "mission-test.conclusion": function() {
        return game.phone.startDialogueByName("mission-test.conclusion");
      },
      "mission-tutorial.conclusion": function() {
        return game.phone.startDialogueByName("mission-tutorial.conclusion");
      }
    };

    function GameData() {
      this.buildDialogueGraphs = bind(this.buildDialogueGraphs, this);
      this.loadDialogueGraphs = bind(this.loadDialogueGraphs, this);
    }

    GameData.prototype.loadDialogueGraphs = function(dialogueGraphsFilename) {
      return $.getJSON(dialogueGraphsFilename, this.buildDialogueGraphs).done(function() {
        return console.log("[LOAD] Loaded dialogue graphs");
      }).fail(function() {
        return console.log("[LOAD] Failed loading dialogue graphs");
      });
    };

    GameData.prototype.buildDialogueGraphs = function(data) {
      var choice, choiceName, dialogueData, dialogueName, i, node, nodeData, nodeName, results, successor;
      this.dialogueGraphs = {};
      results = [];
      for (dialogueName in data) {
        dialogueData = data[dialogueName];
        this.dialogueGraphs[dialogueName] = new DialogueGraph(dialogueName);
        for (nodeName in dialogueData) {
          nodeData = dialogueData[nodeName];
          switch (nodeData.type) {
            case "text":
              node = new DialogueText(nodeName, nodeData.lines, nodeData.successor, nodeData.speaker);
              break;
            case "choice hub":
              node = new DialogueChoiceHub(nodeName, nodeData.choices);
              break;
            case "choice":
              node = new DialogueChoice(nodeName, nodeData.lines, nodeData.successor);
              break;
            case "event":
              node = new DialogueEvent(nodeName, this.eventFunctions[nodeData.eventName], nodeData.successor);
              break;
            case "wait":
              node = new DialogueWait(nodeName, 1000 * nodeData.time, nodeData.successor);
              break;
            default:
              throw new Error("Node " + nodeName + " has unknown type " + nodeData.type);
          }
          this.dialogueGraphs[dialogueName].addNode(node);
        }
        results.push((function() {
          var ref, ref1, results1;
          ref = this.dialogueGraphs[dialogueName].nodes;
          results1 = [];
          for (nodeName in ref) {
            node = ref[nodeName];
            if (((ref1 = node.type) === "text" || ref1 === "choice" || ref1 === "event" || ref1 === "wait") && (node.successor != null)) {
              successor = this.dialogueGraphs[dialogueName].getNode(node.successor);
              if (successor == null) {
                throw new Error("Successor " + node.successor + " not found in dialogue " + dialogueName);
              }
              results1.push(node.successor = successor);
            } else if (node.type === "choice hub") {
              results1.push((function() {
                var j, len, ref2, results2;
                ref2 = node.choices;
                results2 = [];
                for (i = j = 0, len = ref2.length; j < len; i = ++j) {
                  choiceName = ref2[i];
                  choice = this.dialogueGraphs[dialogueName].getNode(choiceName);
                  if (choice == null) {
                    throw new Error("Choice " + choiceName + " not found in dialogue " + dialogueName);
                  }
                  results2.push(node.choices[i] = choice);
                }
                return results2;
              }).call(this));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    return GameData;

  })();


  /* TEMPLATE for dialogue.json
  (when one successor is a choice, all successors should be choices)
  
  {
      "missionName.phaseName": {
          "initial": {},  // reserved name for initial node
  
          "sentence": {
            "type": "text",
            "lines": ["Hi!"],
            "successor": "question?"
          },
          "question?": {
            "type": "text",
            "lines": ["...?"],
            "successor": "question!"
          },
          "question!": {
            "type": "choice node",
            "choices": ["choice1!", "choice2!", "questionChoice3?!"]
          },
          "choice1!": {
            "type": "choice",
            "lines": ["Yes."],
            "successors": []
          },
          "choice2!": {
            "type": "choice",
            "lines": ["No."],
            "successors": []
          },
          "questionChoice3?!": {
            "type": "choice",
            "lines": ["What do you mean?."],
            "successors": []
          }
      }
  }
   */

}).call(this);
