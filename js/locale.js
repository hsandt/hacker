// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Locale = (function() {
    function Locale() {
      this.getName = bind(this.getName, this);
      this.getLine = bind(this.getLine, this);
      this.buildNames = bind(this.buildNames, this);
      this.buildDialogueLines = bind(this.buildDialogueLines, this);
      this.loadNames = bind(this.loadNames, this);
      this.loadDialogueLines = bind(this.loadDialogueLines, this);
      this.dialogueLines = null;
      this.dialogueNames = null;
    }

    Locale.prototype.loadDialogueLines = function(filepath) {
      return $.getJSON(filepath, this.buildDialogueLines).done(function() {
        return console.log("[LOAD] Loaded localized dialogue lines");
      }).fail(function() {
        return console.log("[ERROR] Failed loading localized dialogue lines");
      });
    };

    Locale.prototype.loadNames = function(filepath) {
      return $.getJSON(filepath, this.buildNames).done(function() {
        return console.log("[LOAD] Loaded localized names");
      }).fail(function() {
        return console.log("[ERROR] Failed loading localized names");
      });
    };

    Locale.prototype.buildDialogueLines = function(data) {
      return this.dialogueLines = data;
    };

    Locale.prototype.buildNames = function(data) {
      return this.dialogueNames = data;
    };

    Locale.prototype.getLine = function(lineID) {
      var line, lineNo, missionID, ref, textNo;
      ref = lineID.split('_'), missionID = ref[0], textNo = ref[1], lineNo = ref[2];
      line = this.dialogueLines[missionID][textNo][lineNo];
      if (line == null) {
        throw new Error("Locale for lineID " + lineID + " not found");
      }
      return line;
    };

    Locale.prototype.getName = function(code) {
      var name;
      name = this.dialogueNames[code];
      if (name == null) {
        throw new Error("Locale for codename " + code + " not found");
      }
      return name;
    };

    return Locale;

  })();

}).call(this);

//# sourceMappingURL=locale.js.map
